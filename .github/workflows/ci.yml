name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch: # Allows manual triggering

env:
  GO_VERSION: '1.22'
  NODE_VERSION: '20'

jobs:
  # Test Go backend
  test-backend:
    name: Test Go Backend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download Go dependencies
      run: go mod download

    - name: Verify Go modules
      run: go mod verify

    - name: Run Go vet
      run: go vet ./...

    - name: Run Go fmt check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not properly formatted:"
          gofmt -s -l .
          exit 1
        fi

    - name: Run Go tests
      run: go test -v -race -coverprofile=coverage.out ./...

    - name: Generate coverage report
      run: go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: go-coverage
        path: |
          coverage.out
          coverage.html

    - name: Check test coverage
      run: |
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
        echo "Current test coverage: ${COVERAGE}%"
        echo "COVERAGE=${COVERAGE}" >> $GITHUB_ENV
        # Check if coverage is below threshold (using bc if available, otherwise skip)
        if command -v bc &> /dev/null; then
          if (( $(echo "$COVERAGE < 50" | bc -l) )); then
            echo "Warning: Test coverage is below 50%"
          fi
        else
          echo "bc not available, skipping coverage threshold check"
        fi
    
    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const coverage = process.env.COVERAGE || 'N/A';
          const comment = `## 📊 Test Coverage Report
          
          **Coverage: ${coverage}%**
          
          ${parseFloat(coverage) >= 80 ? '✅ Excellent coverage!' : 
            parseFloat(coverage) >= 60 ? '⚠️ Good coverage, room for improvement' : 
            '❌ Coverage below recommended 60%'}
          
          View detailed coverage report in the artifacts.`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  # Test Frontend
  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'web/frontend/package-lock.json'

    - name: Install frontend dependencies
      working-directory: web/frontend
      run: npm ci

    - name: Run frontend linting
      working-directory: web/frontend
      run: npm run lint

    - name: Run frontend type checking
      working-directory: web/frontend
      run: npm run check

    - name: Build frontend
      working-directory: web/frontend
      run: npm run build

    - name: Upload frontend build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: web/frontend/build

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install Gosec
      run: go install github.com/securego/gosec/v2/cmd/gosec@latest

    - name: Add Go bin to PATH
      run: echo "$HOME/go/bin" >> $GITHUB_PATH

    - name: Run Gosec Security Scanner
      run: gosec -no-fail -fmt sarif -out gosec-results.sarif ./internal/... ./cmd/...
      continue-on-error: true

    - name: Upload SARIF file
      uses: actions/upload-artifact@v4
      with:
        name: gosec-results
        path: gosec-results.sarif


  # Build and push Docker images
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ secrets.DOCKER_HUB_USERNAME }}/osrs-otk
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Download frontend build artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: web/frontend/build
      continue-on-error: true
      
    - name: Check if frontend build exists
      id: check-frontend
      run: |
        if [ -d "web/frontend/build" ] && [ "$(ls -A web/frontend/build)" ]; then
          echo "frontend-exists=true" >> $GITHUB_OUTPUT
        else
          echo "frontend-exists=false" >> $GITHUB_OUTPUT
          echo "Frontend build not found, building frontend in Docker"
        fi

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Deploy to staging (on develop branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-docker]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # This could involve SSH, kubectl, docker-compose, etc.

  # Deploy to production (on main/master branch)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-docker]
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # This could involve SSH, kubectl, docker-compose, etc.

  # Notify on failure
  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, security-scan]
    if: failure()
    
    steps:
    - name: Notify team of failure
      run: |
        echo "Build failed! Check the logs for details."
        # You could add Slack, Discord, email notifications here