package calculators

import "errors"

var XPTable = [...]float64{
	0, 83, 174, 276, 388, 512, 650, 801, 969, 1154, // Levels 1-10
	1358, 1584, 1833, 2107, 2411, 2746, 3115, 3523, 3973, 4470, // Levels 11-20
	5018, 5624, 6291, 7028, 7842, 8740, 9730, 10824, 12031, 13363, // Levels 21-30
	14833, 16456, 18247, 20224, 22406, 24815, 27473, 30408, 33648, 37224, // Levels 31-40
	41171, 45529, 50339, 55649, 61512, 67983, 75127, 83014, 91721, 101333, // Levels 41-50
	111945, 123660, 136594, 150872, 166636, 184040, 203254, 224466, 247886, 273742, // Levels 51-60
	302288, 333804, 368599, 407015, 449428, 496254, 547953, 605032, 668051, 737627, // Levels 61-70
	814445, 899257, 992895, 1096278, 1210421, 1336443, 1475581, 1629200, 1798808, 1986068, // Levels 71-80
	2192818, 2421087, 2673114, 2951373, 3258594, 3597792, 3972294, 4385776, 4842295, 5346332, // Levels 81-90
	5902831, 6517253, 7195629, 7944614, 8771558, 9684577, 10692629, 11805606, 13034431, // Levels 91-99
}

/*
var XPTable = map[int]int{
	50: 104278, 51: 111945, 52: 119885, 53: 128108, 54: 136617,
	55: 145429, 56: 154548, 57: 163991, 58: 173764, 59: 183884,
	60: 194364, 61: 205220, 62: 216467, 63: 228120, 64: 240195,
	65: 252708, 66: 265674, 67: 279110, 68: 293032, 69: 307457,
	70: 322402, 71: 337884, 72: 353920, 73: 370528, 74: 387725,
	75: 405530, 76: 423961, 77: 443036, 78: 462774, 79: 483193,
	80: 504313, 81: 526152, 82: 548731, 83: 572068, 84: 596185,
	85: 621101, 86: 646838, 87: 673416, 88: 700857, 89: 729183,
	90: 758417, 91: 788582, 92: 819701, 93: 851798, 94: 884898,
	95: 919026, 96: 954208, 97: 990471, 98: 1027842, 99: 13034431,
}*/

func LevelForXP(xp float64) int {
	for level := 1; level < len(XPTable); level++ {
		if xp < XPTable[level] {
			return level
		}
	}
	return 99
}

func XPRequired(currentLevel, targetLevel int) (float64, error) {
	if currentLevel < 1 || targetLevel > 99 || currentLevel >= targetLevel {
		return 0, errors.New("invalid levels: current level must be < target level and both between 1 and 99")
	}

	currentXP := XPTable[currentLevel-1]
	targetXP := XPTable[targetLevel-1]

	return float64(targetXP - currentXP), nil
}
